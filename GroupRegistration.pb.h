// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupRegistration.proto

#ifndef PROTOBUF_GroupRegistration_2eproto__INCLUDED
#define PROTOBUF_GroupRegistration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GroupRegistration_2eproto();
void protobuf_AssignDesc_GroupRegistration_2eproto();
void protobuf_ShutdownFile_GroupRegistration_2eproto();

class GroupRegistration;

// ===================================================================

class GroupRegistration : public ::google::protobuf::Message {
 public:
  GroupRegistration();
  virtual ~GroupRegistration();

  GroupRegistration(const GroupRegistration& from);

  inline GroupRegistration& operator=(const GroupRegistration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupRegistration& default_instance();

  void Swap(GroupRegistration* other);

  // implements Message ----------------------------------------------

  GroupRegistration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupRegistration& from);
  void MergeFrom(const GroupRegistration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupID = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // required bool addToGroup = 2;
  inline bool has_addtogroup() const;
  inline void clear_addtogroup();
  static const int kAddToGroupFieldNumber = 2;
  inline bool addtogroup() const;
  inline void set_addtogroup(bool value);

  // optional uint32 flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GroupRegistration)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_addtogroup();
  inline void clear_has_addtogroup();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* groupid_;
  bool addtogroup_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GroupRegistration_2eproto();
  friend void protobuf_AssignDesc_GroupRegistration_2eproto();
  friend void protobuf_ShutdownFile_GroupRegistration_2eproto();

  void InitAsDefaultInstance();
  static GroupRegistration* default_instance_;
};
// ===================================================================


// ===================================================================

// GroupRegistration

// required string groupID = 1;
inline bool GroupRegistration::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupRegistration::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupRegistration::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupRegistration::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& GroupRegistration::groupid() const {
  return *groupid_;
}
inline void GroupRegistration::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void GroupRegistration::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void GroupRegistration::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupRegistration::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* GroupRegistration::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupRegistration::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool addToGroup = 2;
inline bool GroupRegistration::has_addtogroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupRegistration::set_has_addtogroup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupRegistration::clear_has_addtogroup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupRegistration::clear_addtogroup() {
  addtogroup_ = false;
  clear_has_addtogroup();
}
inline bool GroupRegistration::addtogroup() const {
  return addtogroup_;
}
inline void GroupRegistration::set_addtogroup(bool value) {
  set_has_addtogroup();
  addtogroup_ = value;
}

// optional uint32 flags = 3;
inline bool GroupRegistration::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupRegistration::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupRegistration::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupRegistration::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 GroupRegistration::flags() const {
  return flags_;
}
inline void GroupRegistration::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GroupRegistration_2eproto__INCLUDED
