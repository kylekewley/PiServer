// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PiHeader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PiHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_PiHeader_2eproto() {
  delete PiHeader::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PiHeader_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PiHeader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PiHeader::default_instance_ = new PiHeader();
  PiHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PiHeader_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PiHeader_2eproto_once_);
void protobuf_AddDesc_PiHeader_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PiHeader_2eproto_once_,
                 &protobuf_AddDesc_PiHeader_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PiHeader_2eproto {
  StaticDescriptorInitializer_PiHeader_2eproto() {
    protobuf_AddDesc_PiHeader_2eproto();
  }
} static_descriptor_initializer_PiHeader_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PiHeader::kMessageLengthFieldNumber;
const int PiHeader::kParserIDFieldNumber;
const int PiHeader::kMessageIDFieldNumber;
const int PiHeader::kFlagsFieldNumber;
const int PiHeader::kSuccessResponseFieldNumber;
#endif  // !_MSC_VER

PiHeader::PiHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PiHeader)
}

void PiHeader::InitAsDefaultInstance() {
}

PiHeader::PiHeader(const PiHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PiHeader)
}

void PiHeader::SharedCtor() {
  _cached_size_ = 0;
  messagelength_ = 0u;
  parserid_ = 0u;
  messageid_ = 0u;
  flags_ = 0u;
  successresponse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PiHeader::~PiHeader() {
  // @@protoc_insertion_point(destructor:PiHeader)
  SharedDtor();
}

void PiHeader::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PiHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PiHeader& PiHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PiHeader_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PiHeader_2eproto();
#endif
  return *default_instance_;
}

PiHeader* PiHeader::default_instance_ = NULL;

PiHeader* PiHeader::New() const {
  return new PiHeader;
}

void PiHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PiHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(messagelength_, successresponse_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PiHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PiHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 messageLength = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagelength_)));
          set_has_messagelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parserID;
        break;
      }

      // required uint32 parserID = 2;
      case 2: {
        if (tag == 16) {
         parse_parserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parserid_)));
          set_has_parserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_messageID;
        break;
      }

      // optional uint32 messageID = 3;
      case 3: {
        if (tag == 24) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_successResponse;
        break;
      }

      // optional bool successResponse = 5;
      case 5: {
        if (tag == 40) {
         parse_successResponse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successresponse_)));
          set_has_successresponse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PiHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PiHeader)
  return false;
#undef DO_
}

void PiHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PiHeader)
  // required uint32 messageLength = 1;
  if (has_messagelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messagelength(), output);
  }

  // required uint32 parserID = 2;
  if (has_parserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parserid(), output);
  }

  // optional uint32 messageID = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->messageid(), output);
  }

  // optional uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  // optional bool successResponse = 5;
  if (has_successresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->successresponse(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PiHeader)
}

int PiHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 messageLength = 1;
    if (has_messagelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagelength());
    }

    // required uint32 parserID = 2;
    if (has_parserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parserid());
    }

    // optional uint32 messageID = 3;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messageid());
    }

    // optional uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bool successResponse = 5;
    if (has_successresponse()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PiHeader*>(&from));
}

void PiHeader::MergeFrom(const PiHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagelength()) {
      set_messagelength(from.messagelength());
    }
    if (from.has_parserid()) {
      set_parserid(from.parserid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_successresponse()) {
      set_successresponse(from.successresponse());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PiHeader::CopyFrom(const PiHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PiHeader::Swap(PiHeader* other) {
  if (other != this) {
    std::swap(messagelength_, other->messagelength_);
    std::swap(parserid_, other->parserid_);
    std::swap(messageid_, other->messageid_);
    std::swap(flags_, other->flags_);
    std::swap(successresponse_, other->successresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PiHeader::GetTypeName() const {
  return "PiHeader";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
