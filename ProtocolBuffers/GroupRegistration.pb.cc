// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupRegistration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupRegistration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_GroupRegistration_2eproto() {
  delete GroupRegistration::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GroupRegistration_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GroupRegistration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GroupRegistration::default_instance_ = new GroupRegistration();
  GroupRegistration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupRegistration_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GroupRegistration_2eproto_once_);
void protobuf_AddDesc_GroupRegistration_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GroupRegistration_2eproto_once_,
                 &protobuf_AddDesc_GroupRegistration_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupRegistration_2eproto {
  StaticDescriptorInitializer_GroupRegistration_2eproto() {
    protobuf_AddDesc_GroupRegistration_2eproto();
  }
} static_descriptor_initializer_GroupRegistration_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GroupRegistration::kGroupIDFieldNumber;
const int GroupRegistration::kAddToGroupFieldNumber;
const int GroupRegistration::kFlagsFieldNumber;
const int GroupRegistration::kClientNameFieldNumber;
#endif  // !_MSC_VER

GroupRegistration::GroupRegistration()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupRegistration)
}

void GroupRegistration::InitAsDefaultInstance() {
}

GroupRegistration::GroupRegistration(const GroupRegistration& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GroupRegistration)
}

void GroupRegistration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addtogroup_ = false;
  flags_ = 0u;
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupRegistration::~GroupRegistration() {
  // @@protoc_insertion_point(destructor:GroupRegistration)
  SharedDtor();
}

void GroupRegistration::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (clientname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupRegistration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupRegistration& GroupRegistration::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GroupRegistration_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GroupRegistration_2eproto();
#endif
  return *default_instance_;
}

GroupRegistration* GroupRegistration::default_instance_ = NULL;

GroupRegistration* GroupRegistration::New() const {
  return new GroupRegistration;
}

void GroupRegistration::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupRegistration*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(addtogroup_, flags_);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupid_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GroupRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:GroupRegistration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addToGroup;
        break;
      }

      // required bool addToGroup = 2;
      case 2: {
        if (tag == 16) {
         parse_addToGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addtogroup_)));
          set_has_addtogroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clientName;
        break;
      }

      // optional string clientName = 4;
      case 4: {
        if (tag == 34) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GroupRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GroupRegistration)
  return false;
#undef DO_
}

void GroupRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GroupRegistration)
  // required string groupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // required bool addToGroup = 2;
  if (has_addtogroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->addtogroup(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional string clientName = 4;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:GroupRegistration)
}

int GroupRegistration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // required bool addToGroup = 2;
    if (has_addtogroup()) {
      total_size += 1 + 1;
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string clientName = 4;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRegistration::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupRegistration*>(&from));
}

void GroupRegistration::MergeFrom(const GroupRegistration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_addtogroup()) {
      set_addtogroup(from.addtogroup());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GroupRegistration::CopyFrom(const GroupRegistration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupRegistration::Swap(GroupRegistration* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(addtogroup_, other->addtogroup_);
    std::swap(flags_, other->flags_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupRegistration::GetTypeName() const {
  return "GroupRegistration";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
