// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ping.proto

#ifndef PROTOBUF_Ping_2eproto__INCLUDED
#define PROTOBUF_Ping_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Ping_2eproto();
void protobuf_AssignDesc_Ping_2eproto();
void protobuf_ShutdownFile_Ping_2eproto();

class Ping;

// ===================================================================

class Ping : public ::google::protobuf::MessageLite {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Ping& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Ping* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  Ping* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sentTime = 1;
  inline bool has_senttime() const;
  inline void clear_senttime();
  static const int kSentTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 senttime() const;
  inline void set_senttime(::google::protobuf::uint32 value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:Ping)
 private:
  inline void set_has_senttime();
  inline void clear_has_senttime();
  inline void set_has_message();
  inline void clear_has_message();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::uint32 senttime_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Ping_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Ping_2eproto();
  #endif
  friend void protobuf_AssignDesc_Ping_2eproto();
  friend void protobuf_ShutdownFile_Ping_2eproto();

  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// ===================================================================


// ===================================================================

// Ping

// optional uint32 sentTime = 1;
inline bool Ping::has_senttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ping::set_has_senttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ping::clear_has_senttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ping::clear_senttime() {
  senttime_ = 0u;
  clear_has_senttime();
}
inline ::google::protobuf::uint32 Ping::senttime() const {
  // @@protoc_insertion_point(field_get:Ping.sentTime)
  return senttime_;
}
inline void Ping::set_senttime(::google::protobuf::uint32 value) {
  set_has_senttime();
  senttime_ = value;
  // @@protoc_insertion_point(field_set:Ping.sentTime)
}

// optional string message = 2;
inline bool Ping::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ping::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ping::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ping::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Ping::message() const {
  // @@protoc_insertion_point(field_get:Ping.message)
  return *message_;
}
inline void Ping::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:Ping.message)
}
inline void Ping::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:Ping.message)
}
inline void Ping::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Ping.message)
}
inline ::std::string* Ping::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Ping.message)
  return message_;
}
inline ::std::string* Ping::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ping::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Ping.message)
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Ping_2eproto__INCLUDED
